# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

#theState = 
#    next_turn_number: 10
#    pool: 'www'
#    bag_size: 130
#    stashes:
#        leon:
#            [[1, 'mol'], [3,'rails'], [11, 'mol'], [13,'rails'], [111, 'mol'], [311,'rails'], [121, 'mol'], [32,'rails'], [541, 'mol'], [36,'rails'], [162, 'mol'], [3234,'rails'], [12345, 'mol'], [32345,'rails'], [116, 'mol'], [361,'rails'], [113463, 'mol'], [311111,'rails']]
#        bethany:
#            [[6, 'guanacsid']]

TILE_IMAGES = {
    <% ('a'..'z').each do |c| %>
      <%= c %>: '<%= asset_path "tiles/#{c}.png" %>'
    <% end %>
}

window.initTable = (table_uuid) ->
    #gameState = {}
    dispatcher = null
    window.next_turn_number = 1

    initSocket = () ->
        dispatcher = new WebSocketRails(window.document.location.host + "/websocket")
        channel = dispatcher.subscribe_private(table_uuid)

        dispatcher.on_open = (data) ->
            dispatcher.trigger 'table.state_request'

        $('#flip_tile').on 'click', () ->
            # TODO stop using global window.next_turn_number
            console.log "tile flip requested!" + window.next_turn_number
            dispatcher.trigger 'table.flip_tile_request', {"turn_number": window.next_turn_number}
            $('#word_entry').focus()

        $('#word_entry').on 'keypress', (event, abc) ->
            # trigger when enter is pressed
            if(event.which == 13)
                # TODO fix redundant $('#word_entry')
                dispatcher.trigger 'table.build_request', {"word": $('#word_entry').val()}
                $('#word_entry').val('').focus()

        channel.bind 'game_info.next_turn_number', (response) ->
            window.next_turn_number = response

        channel.bind 'game_event.new_state', (response) ->
            # we may want a game log?
            #$('#gamelog').append($('<div/>').html(response))
            updateAll(response)

        channel.bind 'game_event.illegal_move', (response) ->
            alert("Illegal move")

        return dispatcher

    updateAll = (state) ->
        window.next_turn_number = state.next_turn_number
        updateBag(state)
        updatePool(state)
        updateScore(state)
        updateStashes(state)
        gamestate = state
        if (state.bag_size == 0) 
            $('#flip_tile').text("End Game")

    updateBag = (state) ->
        console.log("updating bag")
        $bagBox = $('#bagBox')
        $bagBox.html(state.bag_size)

    updateScore = (state) ->
        $score = $('#scoreDiv')
        if (Object.keys(state.stashes).length == 1)
            $score.show()
            console.log('updating score')
            $score.html("Score: " + state.score)
        else
            $score.hide()

    appendLetter = ($elt, letter) ->
        $tile = $('<img src="' + TILE_IMAGES[letter] + '" hspace="1">').addClass('tile')
        $elt.append($tile)

    updatePool = (state) ->
        console.log("updating pool")
        $poolDiv = $('#poolDiv')
        $poolDiv.html('')
        letters = state.pool
        i = 0
        letters.split("").forEach((letter) ->
            if (i%10==0)
                $poolDiv.append("<br>")
            i++
            appendLetter($poolDiv, letter)
        )

    updateSingleStash = (state, stashName) ->
        $myStash = $('<div>').addClass('singleStash')
        $myTitle = $('<div>').addClass('fancyBox').addClass('stashTitle')
        $myTitle.html(stashName)
        $myStash.append($myTitle)
        $myStash.append($('<br>'))

        $stashDiv = $('#stashDiv')

        state.stashes[stashName].forEach((entry) ->
            $wordDiv = $("<div>").attr('turnNumber', entry[0]).addClass('wordDiv')
            entry[1].split('').forEach((letter) ->
                appendLetter($wordDiv, letter)
            )
            $wordDiv.on 'click', () ->
                submitMorph(entry[0])
                $('#word_entry').val('')
                $('#word_entry').focus()

            f1 = () -> $wordDiv.addClass("hasBorder")
            f2 = () -> $wordDiv.removeClass("hasBorder")
            $wordDiv.hover( f1, f2 )
            $myStash.append($wordDiv)
            $myStash.append("<br>")
        )

        $stashDiv.append($myStash)

    submitMorph = (changed_turn_number) ->
        dispatcher.trigger 'table.morph_request', {
          changed_turn_number: changed_turn_number,
          word: $('#word_entry').val()
        }

    updateStashes = (state) ->
        console.log("updating stashes")
        $("#stashDiv").html("")
        updateSingleStash(state, name) for name, words of state.stashes

    findStashDivByName = (name) ->
        # TODO for multiplayer mode, this will need to be a nontrivial method
        return $("#stashDiv")

    window.show_table_setup = () ->
        dispatcher = initSocket()
        #gameState.stashes[fiend].sort((pair1, pair2) ->
        #  return pair1[0] - pair2[0]
        #) for fiend in gameState.stashes

    # $ -> onready()
